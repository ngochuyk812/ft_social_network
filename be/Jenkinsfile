def stage() {
    def DOCKER_NAME_IMAGE = "social-network-be"

    pipeline {
        agent none

        stages {
            stage('Set Environment') {
                agent any
                steps {
                    script {
                        def branchName = env.GIT_BRANCH.replaceFirst(/^origin\//, '')
                        env.ENV_DEPLOY = (branchName == 'master') ? 'prod' : 'dev'
                        env.DOCKER_IMAGE = "ngochuyk8/${ENV_DEPLOY}-${DOCKER_NAME_IMAGE}:${BUILD_ID}"
                    }
                }
            }
            stage('Build') {
                agent any
                steps {
                    script {
                        echo "Docker Tag: ${env.DOCKER_IMAGE}"
                    }
                    sh "docker build -t ${env.DOCKER_IMAGE} ."
                    withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin'
                        sh "docker push ${env.DOCKER_IMAGE}"
                    }
                    // Clean to save disk space
                    sh "docker image rm ${env.DOCKER_IMAGE}"
                }
            }
            stage('Test') {
                steps {
                    echo 'Testing..'
                }
            }
            stage('Clone Repository Template Deploy K8s') {
                agent any
                steps {
                    script {
                        withCredentials([string(credentialsId: 'GithubSecret', variable: 'TOKEN')]) {
                            sh 'rm -rf devops'
                            sh 'git clone https://${TOKEN}@github.com/ngochuyk812/devops.git'
                            sh 'cd devops && ls -la'
                        }
                    }
                }
            }
            stage('Deploy') {
                agent any
                steps {
                    script {
                        sh 'cd devops && ls -la'

                        echo "Deleting the K8s...: ngochuyk8/${env.BRANCH_NAME}/${DOCKER_NAME_IMAGE}:${BUILD_ID}"
                        // Ensure that the pipelineK8s object is correctly loaded and contains a run method
                        def pipelineK8s = load 'devops/Jenkinsfile'
                        pipelineK8s.run("${DOCKER_NAME_IMAGE}", env.DOCKER_IMAGE, 'devops', ".net", env.ENV_DEPLOY) 
                    }
                }
            }
        }
    }
}

return this
